// MinecraftUI Core Mixins

@use 'sass:map';
@import './functions';
@import './variables';

// MinecraftUI Enhanced Mixins - обновленные миксины

// ================================
// ENHANCED BLOCK EFFECTS
// ================================

// 3D блок эффект с улучшенной типизацией
@mixin mc-block-border($color: $mc-outline, $width: $mc-radius-xs, $style: 'raised') {
  border: $width solid $color;

  @if $style == 'raised' {
    border-top-color: lighten($color, 20%);
    border-left-color: lighten($color, 20%);
    border-bottom-color: darken($color, 20%);
    border-right-color: darken($color, 20%);
  } @else if $style == 'inset' {
    border-top-color: darken($color, 20%);
    border-left-color: darken($color, 20%);
    border-bottom-color: lighten($color, 20%);
    border-right-color: lighten($color, 20%);
  }
}

// Современный блок эффект для Bedrock темы
@mixin mc-modern-elevation($level: 1, $color: rgba(0, 0, 0, 0.2)) {
  @if $level == 1 {
    box-shadow: 0 1px 3px $color, 0 1px 2px rgba(0, 0, 0, 0.24);
  } @else if $level == 2 {
    box-shadow: 0 3px 6px $color, 0 2px 4px rgba(0, 0, 0, 0.24);
  } @else if $level == 3 {
    box-shadow: 0 10px 20px $color, 0 6px 10px rgba(0, 0, 0, 0.24);
  } @else if $level == 4 {
    box-shadow: 0 14px 28px $color, 0 10px 20px rgba(0, 0, 0, 0.24);
  } @else if $level == 5 {
    box-shadow: 0 19px 38px $color, 0 15px 30px rgba(0, 0, 0, 0.24);
  }
}

// ================================
// TOOLTIPS
// ================================

@mixin mc-tooltip-base() {
  position: relative;

  &[data-tooltip]:not([data-tooltip=""]) {
    &::before,
    &::after {
      opacity: 0;
      pointer-events: none;
      transition: opacity $mc-duration-short4 $mc-easing-standard,
      transform $mc-duration-short4 $mc-easing-standard;
      z-index: $mc-z-tooltip;
      position: absolute;
    }

    // Тултип контент
    &::before {
      content: attr(data-tooltip);
      background: $mc-surface-container-high;
      color: $mc-on-surface;
      padding: $mc-space-2 $mc-space-3;
      font-size: $mc-body-small-size;
      font-weight: $mc-font-weight-medium;
      line-height: $mc-body-small-height;
      border-radius: $mc-radius-md;
      box-shadow: $mc-elevation-2;
      max-width: 200px;
      white-space: normal;
      word-wrap: break-word;
      text-align: center;
    }

    // Стрелка тултипа
    &::after {
      content: '';
      width: 0;
      height: 0;
      border: 6px solid transparent;
    }

    &:hover::before,
    &:hover::after {
      opacity: 1;
      pointer-events: auto;
    }
  }
}

@mixin mc-tooltip-position($position: 'top', $offset: 8px) {
  @if $position == 'top' {
    &::before {
      bottom: 100%;
      left: 50%;
      transform: translateX(-50%) translateY(-#{$offset});
      margin-bottom: 6px;
    }

    &::after {
      bottom: 100%;
      left: 50%;
      transform: translateX(-50%);
      border-top-color: $mc-surface-container-high;
      margin-bottom: 0;
    }

    &:hover::before {
      transform: translateX(-50%) translateY(-#{$offset + 4px});
    }
  } @else if $position == 'bottom' {
    &::before {
      top: 100%;
      left: 50%;
      transform: translateX(-50%) translateY(#{$offset});
      margin-top: 6px;
    }

    &::after {
      top: 100%;
      left: 50%;
      transform: translateX(-50%);
      border-bottom-color: $mc-surface-container-high;
      margin-top: 0;
    }

    &:hover::before {
      transform: translateX(-50%) translateY(#{$offset + 4px});
    }
  } @else if $position == 'left' {
    &::before {
      right: 100%;
      top: 50%;
      transform: translateY(-50%) translateX(-#{$offset});
      margin-right: 6px;
    }

    &::after {
      right: 100%;
      top: 50%;
      transform: translateY(-50%);
      border-left-color: $mc-surface-container-high;
      margin-right: 0;
    }

    &:hover::before {
      transform: translateY(-50%) translateX(-#{$offset + 4px});
    }
  } @else if $position == 'right' {
    &::before {
      left: 100%;
      top: 50%;
      transform: translateY(-50%) translateX(#{$offset});
      margin-left: 6px;
    }

    &::after {
      left: 100%;
      top: 50%;
      transform: translateY(-50%);
      border-right-color: $mc-surface-container-high;
      margin-left: 0;
    }

    &:hover::before {
      transform: translateY(-50%) translateX(#{$offset + 4px});
    }
  }
}

// ================================
// COMPONENT MIXINS
// ================================

// Универсальный миксин для кнопок
@mixin mc-button-base(
  $height: $mc-button-height-md,
  $padding-x: $mc-space-6,
  $radius: $mc-button-radius,
  $typography: $mc-label-large-size
) {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  height: $height;
  padding: 0 $padding-x;
  border: none;
  border-radius: $radius;
  font-family: $mc-font-family-body;
  font-size: $typography;
  font-weight: $mc-font-weight-medium;
  text-decoration: none;
  cursor: pointer;
  user-select: none;
  vertical-align: middle;
  transition: all $mc-duration-short4 $mc-easing-standard;
  position: relative;
  overflow: hidden;

  // Ripple effect placeholder
  &::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.3);
    transform: translate(-50%, -50%);
    transition: width $mc-duration-short4 $mc-easing-standard,
    height $mc-duration-short4 $mc-easing-standard;
  }

  &:active::before {
    width: 300px;
    height: 300px;
  }

  &:disabled {
    opacity: $mc-disabled-opacity;
    cursor: not-allowed;
    pointer-events: none;
  }
}

// Миксин для создания карточек
@mixin mc-card-base(
  $padding: $mc-card-padding,
  $radius: $mc-card-radius,
  $elevation: 1
) {
  background: $mc-surface;
  color: $mc-on-surface;
  border-radius: $radius;
  padding: $padding;
  @include mc-modern-elevation($elevation);

  .mc-card-header {
    margin: (-$padding) (-$padding) $padding (-$padding);
    padding: $mc-space-4 $padding;
    background: $mc-surface-variant;
    border-radius: $radius $radius 0 0;
    border-bottom: 1px solid $mc-outline-variant;

    .mc-card-title {
      font-size: $mc-title-medium-size;
      font-weight: $mc-font-weight-medium;
      color: $mc-on-surface;
      margin: 0;
    }

    .mc-card-subtitle {
      font-size: $mc-body-medium-size;
      color: $mc-on-surface-variant;
      margin: $mc-space-1 0 0;
    }
  }

  .mc-card-content {
    font-size: $mc-body-medium-size;
    line-height: $mc-body-medium-height;
    color: $mc-on-surface;
  }

  .mc-card-actions {
    margin: $padding (-$padding) (-$padding) (-$padding);
    padding: $mc-space-4 $padding;
    display: flex;
    gap: $mc-space-2;
    justify-content: flex-end;
    border-top: 1px solid $mc-outline-variant;
  }
}

// ================================
// АНИМАЦИОННЫЕ МИКСИНЫ
// ================================

@mixin mc-animate-in($type: 'fade', $duration: $mc-duration-medium2, $delay: 0s) {
  animation-duration: $duration;
  animation-delay: $delay;
  animation-fill-mode: both;
  animation-timing-function: $mc-easing-emphasized;

  @if $type == 'fade' {
    animation-name: mcFadeIn;
  } @else if $type == 'slide-up' {
    animation-name: mcSlideUp;
  } @else if $type == 'slide-down' {
    animation-name: mcSlideDown;
  } @else if $type == 'slide-left' {
    animation-name: mcSlideLeft;
  } @else if $type == 'slide-right' {
    animation-name: mcSlideRight;
  } @else if $type == 'scale' {
    animation-name: mcScaleIn;
  } @else if $type == 'rotate' {
    animation-name: mcRotateIn;
  }
}

// ================================
// PIXEL ART UTILITIES
// ================================

// Make images and elements pixelated
@mixin mc-pixelated() {
  image-rendering: -moz-crisp-edges;
  image-rendering: -webkit-crisp-edges;
  image-rendering: pixelated;
  image-rendering: crisp-edges;
}

// ================================
// MINECRAFT BLOCK EFFECTS
// ================================

// Create 3D block border effect
@mixin mc-block-border($color: $mc-stone, $width: $mc-radius-xs) {
  border: solid mc-lighten($color, 20%);
  border-right-color: mc-darken($color, 20%);
  border-bottom-color: mc-darken($color, 20%);
}

// Pressed/active block effect (inverted borders)
@mixin mc-block-pressed($color: $mc-stone, $width: $mc-radius-xs) {
  border: solid mc-darken($color, 20%);
  border-right-color: mc-lighten($color, 20%);
  border-bottom-color: mc-lighten($color, 20%);
}

// Inset border effect (for inputs)
@mixin mc-block-inset($color: $mc-stone, $width: $mc-radius-xs) {
  border: $width inset $color;
}

// Outset border effect (for raised elements)
@mixin mc-block-outset($color: $mc-stone, $width: $mc-radius-xs) {
  border: $width outset $color;
}

// ================================
// RESPONSIVE UTILITIES
// ================================

// Media query mixin
@mixin mc-media-up($breakpoint) {
  @if map.has-key($mc-breakpoints, $breakpoint) {
    $bp: map.get($mc-breakpoints, $breakpoint);
    @if $bp > 0 {
      @media (min-width: $bp) {
        @content;
      }
    } @else {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}";
  }
}

@mixin mc-media-down($breakpoint) {
  @if map.has-key($mc-breakpoints, $breakpoint) {
    $bp: map.get($mc-breakpoints, $breakpoint);
    @if $bp > 0 {
      @media (max-width: $bp - 0.02px) {
        @content;
      }
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}";
  }
}

@mixin mc-media-between($lower, $upper) {
  @if map.has-key($mc-breakpoints, $lower) and map.has-key($mc-breakpoints, $upper) {
    $lower-bp: map.get($mc-breakpoints, $lower);
    $upper-bp: map.get($mc-breakpoints, $upper);

    @if $lower-bp <= $upper-bp {
      @media (min-width: $lower-bp) and (max-width: $upper-bp - 0.02px) {
        @content;
      }
    } @else {
      @warn "Lower breakpoint must be smaller than upper breakpoint";
    }
  } @else {
    @warn "Unknown breakpoint in mc-media-between";
  }
}

// Контейнер с максимальной шириной
@mixin mc-container($max-width: null, $padding: $mc-container-padding) {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  padding-left: $padding;
  padding-right: $padding;

  @if $max-width {
    max-width: $max-width;
  } @else {
    @each $breakpoint, $width in $mc-container-max-widths {
      @include mc-media-up($breakpoint) {
        max-width: $width;
      }
    }
  }
}

// Grid система
@mixin mc-grid($columns: 12, $gap: $mc-component-gap) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

@mixin mc-grid-item($span: 1, $start: null) {
  grid-column: #{if($start, $start, 'span')} / #{if($start, span $span, '')};
}

// ================================
// THEME MIXINS
// ================================

// Автоматическое переопределение для тем
@mixin mc-theme-aware($property, $light-value, $dark-value: null) {
  #{$property}: $light-value;

  @if $dark-value {
    .mc-theme-bedrock & {
      #{$property}: $dark-value;
    }
  }
}

// ================================
// COMPONENT MIXINS
// ================================

// Button variant mixin
@mixin mc-button-variant($bg-color, $text-color: null) {
  $text: if($text-color, $text-color, if(lightness($bg-color) > 50%, mc-luminance($mc-on-background), $mc-on-background));

  background: $bg-color;
  color: $text;
  @include mc-block-border($bg-color);

  &:hover:not(:disabled) {
    background: mc-darken($bg-color, 8%);
  }

  &:active:not(:disabled) {
    @include mc-block-pressed($bg-color);
    transform: translate(1px, 1px);
  }
}

// Button size mixin
@mixin mc-button-size($padding-y, $padding-x, $font-size: null) {
  padding: $padding-y $padding-x;
  @if $font-size {
    font-size: $font-size;
  }
}

// Card variant mixin
@mixin mc-card-variant($bg-color, $border-color: null) {
  $border: if($border-color, $border-color, $bg-color);

  background: $bg-color;
  @include mc-block-border($border);
}

// Progress bar variant mixin
@mixin mc-progress-variant($color) {
  .mc-progress-bar {
    background: $color;

    &::after {
      background: linear-gradient(
                      90deg,
                      transparent,
                      rgba(255, 255, 255, 0.3),
                      transparent
      );
    }
  }
}

// ================================
// ANIMATION MIXINS
// ================================

// Fade in animation
@mixin mc-fade-in($duration: $mc-duration-long2) {
  opacity: 0;
  animation: mcFadeIn $duration $mc-easing-standard forwards;
}

// Slide in animation
@mixin mc-slide-in($direction: up, $distance: 20px, $duration: $mc-duration-long2) {
  $transform: translateY($distance);

  @if $direction == down {
    $transform: translateY(-$distance);
  } @else if $direction == left {
    $transform: translateX($distance);
  } @else if $direction == right {
    $transform: translateX(-$distance);
  }

  transform: $transform;
  opacity: 0;
  animation: mcSlideIn#{capitalize($direction)} $duration $mc-easing-standard forwards;
}

// Pulse animation
@mixin mc-pulse($duration: 1s) {
  animation: mcPulse $duration infinite;
}

// Shake animation
@mixin mc-shake($duration: 0.5s) {
  animation: mcShake $duration $mc-easing-standard;
}

// ================================
// UTILITY MIXINS
// ================================

// Visually hidden (for screen readers)
@mixin mc-sr-only() {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

// Clear fix for floated elements
@mixin mc-clearfix() {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

// Truncate text with ellipsis
@mixin mc-text-truncate() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Center element absolutely
@mixin mc-center-absolute() {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// Full size overlay
@mixin mc-overlay() {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

// ================================
// FOCUS UTILITIES
// ================================

// Custom focus ring for accessibility
@mixin mc-focus-ring($color: $mc-info, $width: 2px, $offset: 2px) {
  outline: $width solid $color;
  outline-offset: $offset;
}

// Remove focus outline (use with caution!)
@mixin mc-focus-none() {
  outline: none;
  box-shadow: none;
}

// ================================
// FORM MIXINS
// ================================

// Form control base styles
@mixin mc-form-control-base() {
  display: block;
  width: 100%;
  padding: $mc-space-2;
  font-family: $mc-font-family-body;
  font-size: $mc-body-medium-size;
  line-height: $mc-headline-medium-height;
  color: $mc-on-background;
  background: $mc-background;
  border: $mc-radius-xs solid $mc-stone;
  transition: border $mc-duration-medium1;

  &:focus {
    border-color: $mc-info;
    background: $mc-background;
    outline: none;
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  &::placeholder {
    color: $mc-on-background;
    opacity: 0.7;
  }
}

// Form validation states
@mixin mc-form-validation-state($color) {
  border-color: $color;

  &:focus {
    border-color: $color;
  }
}

// ================================
// TYPOGRAPHY MIXINS
// ================================

// Text styles
@mixin mc-text-style($size: base, $weight: normal, $color: null) {
  font-size: var(--mc-font-size-#{$size});
  font-weight: $weight;
  @if $color {
    color: $color;
  }
}